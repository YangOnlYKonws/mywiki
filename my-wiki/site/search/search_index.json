{"config":{"lang":["ja"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u9996\u9875","text":""},{"location":"#_1","title":"\u524d\u8a00","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u4e2a\u4eba\u4f7f\u7528\u7684wiki\u5e93\uff0c\u5305\u542b\u4e00\u4e9b\u95ee\u9898\u7684\u603b\u7ed3\u4e0e\u89e3\u6cd5</p> <p>\u6211\u8ba4\u4e3a\uff0c\u53ea\u8981\u7ec3\u4e60\u5f97\u591f\u591a\uff0c\u50bb\u5b50\u4e5f\u80fd\u6210\u4e3a\u9ad8\u624b\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e9b\u63a2\u7a76\u6027\u7684\u95ee\u9898\uff0c\u6216\u8005\u662f\u4e00\u4e9b\u6781\u9ad8\u5929\u8d4b\u624d\u80fd\u89e3\u51b3\u7684\u4e8b\u60c5\uff0c\u8fd9\u4e9b\u90fd\u662f\u53ea\u8981\u901a\u8fc7\u4e00\u5b9a\u7684\u7ec3\u4e60\u5c31\u53ef\u4ee5\u638c\u63e1\u7684\u6280\u5de7\uff0c\u53ea\u8981\u80af\u7ec3\u4e60\uff0c\u65f6\u95f4\u591f\u591a\uff0c\u603b\u662f\u80fd\u5b66\u4f1a\u7684\u3002</p> <p>\u6709\u4efb\u4f55\u95ee\u9898\u53ef\u4ee5\u53d1\u90ae\u4ef6\u5230\u6211\u7684\u90ae\u7bb115rorz@outlook.com</p>"},{"location":"#_2","title":"\u6ce8\u610f\u4e8b\u9879","text":"<p>\u5982\u679c\u4f60\u5bf9\u6211\u7684\u5e93\u4e2d\u7684\u4efb\u4f55\u95ee\u9898\u6216\u8005\u89e3\u6cd5\u6709\u4e0d\u540c\u7684\u7406\u89e3\uff0c\u6b22\u8fce\u8ba8\u8bba\u5e76\u4e14\u6307\u51fa\u6211\u7684\u9519\u8bef\uff0c\u975e\u5e38\u611f\u8c22</p> <p>\u6211\u4e0d\u4f1a\u5728\u5e93\u4e2d\u6dfb\u52a0\u4efb\u4f55\u8ba8\u8bba\u533a\uff0c\u6bd5\u7adf\u8fd9\u662f\u4e2a\u4eba\u7f51\u7ad9\uff0c\u4e5f\u4e0d\u7b97\u535a\u5ba2</p>"},{"location":"Java/Java%E8%B4%A9%E5%8D%96%E6%9C%BA/","title":"\u5c0f\u9879\u76ee\uff08\u7ec3\u624b\uff09","text":""},{"location":"Java/Java%E8%B4%A9%E5%8D%96%E6%9C%BA/#java","title":"Java\u8d29\u5356\u673a","text":"<p>\u4e3a\u4ec0\u4e48\u6211\u8981\u5199\u4e00\u4e2a\u8d29\u5356\u673a\u5462\uff0c\u7b2c\u4e00\u76ee\u7684\u662f\u7406\u89e3Java\u4e0eC\u7684\u4e0d\u540c\u533a\u522b\uff0c\u867d\u7136\u6211\u5199\u7684\u8fd9\u4e2a\u6ca1\u6709\u7528\u5f88\u591a\u7684\u7c7b\u5b9a\u4e49\uff0c\u4e5f\u6ca1\u7528\u5230\u63a5\u53e3\uff0c\u4f46\u662f\u6211\u7684\u60f3\u6cd5\u662f\uff0c\u8fd9\u4f55\u5c1d\u4e0d\u662f\u4e00\u79cd\u5bf9\u8bdd\u7684\u5c1d\u8bd5\uff0c\u6211\u5728\u4e0a\u8bfe\u7684\u65f6\u5019\u5b66\u5230\u8fd9\u4e2a\u5730\u65b9\uff0c\u8001\u5e08\u5f53\u65f6\u4e3e\u7684\u662f\u8d29\u5356\u673a\u7684\u4f8b\u5b50\uff0c\u6211\u9996\u5148\u60f3\u5230\u7684\u662fRPG\u6e38\u620f\u7684\u5546\u4eba\uff0c\u7136\u540e\u662f\u5546\u4eba\u7684\u6298\u6263\u529f\u80fd\uff0c\u7136\u540e\u662f\u5bf9\u8bdd\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u53ef\u62d3\u5c55\u529f\u80fd\u53ef\u4ee5\u5b9e\u73b0\u591a\u79cd\u65b9\u9762\u4e32\u8054\u8d77\u6765\uff0c\u5f15\u8d77\u591a\u79cd\u65b9\u9762\u7684\u7ed3\u679c\u3002</p> <p>\u6700\u65e9\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u662f\u60f3\u7528\u591a\u79cd\u7c7b\uff0c\u591a\u79cd\u63a5\u53e3\uff0c\u7136\u540e\u7528\u4e0a\u7ee7\u627f\u7684\u65b9\u6cd5\u6765\u5199\u8fd9\u4e48\u4e00\u4e2a\u4e1c\u897f\uff0c\u4ece\u800c\u5de9\u56fa\u6211\u521a\u5b66\u7684Java\u77e5\u8bc6\uff0c\u73b0\u5728\u8fd9\u4e2aPart I\u7248\u672c\u53ea\u80fd\u5de9\u56fa\u57fa\u7840\u8bed\u6cd5\uff0c\u540e\u7eed\u4f1a\u63a8\u51faPart II\u6765\u5b9e\u73b0\u6211\u6240\u8bf4\u7684\u591a\u7c7b\uff0c\u591a\u501f\u53e3\uff0c\u7ee7\u627f\u3002</p> <pre><code>import java.util.Random;\nimport java.util.Scanner;\npublic class potOfGreed {\npublic static final double[] prince = {15.5,20.4,20.9};\npublic static final String[] goodsName = {\"\u6cbb\u7597\u836f\u6c34\",\"\u9b54\u529b\u836f\u6c34\",\"\u4f20\u9001\u5377\u8f74\"};\npublic static final int goodsKind = prince.length;\npublic static final double discountMax = 1.0;\npublic static final double discountMin = 0.0;\npublic static final Random random = new Random(); //1.\u57fa\u7840\u70b9\npublic static void main(String[] args) {\ndouble discount = randomDiscount(); //2.\u57fa\u7840\u70b9\nSystem.out.printf(\"\u5f3a\u6b32\u4e4b\u58f6\uff01\u5c0f\u5b50\uff01\u4eca\u65e5\u6298\u6263\u662f%.1f\\n\", discount);\nScanner scanner = new Scanner(System.in); //3.\u57fa\u7840\u70b9\nwhile(true) {\nSystem.out.println(\"\u4f60\u60f3\u8981\u6211\u7ed9\u4f60\u53d8\u5565\u51fa\u6765\uff1a\");\nfor(int i = 0;i &lt; goodsKind;i++) {\ndouble princeDis = prince[i] * (1-discount);\nSystem.out.printf(\"\u5e8f\u53f7\uff1a%d,\u540d\u79f0\uff1a%s,\u4ef7\u683c\uff1a%.1f\\n\", i+1, goodsName[i], princeDis); //4.\u57fa\u7840\u70b9\n}\nSystem.out.println(\"0. \u9000\u51fa\");\nint choice = scanner.nextInt();\nif(choice == 0) {\nbreak;\n}\nelse if(choice &lt; 1 || choice &gt; 3) {\nSystem.out.println(\"\u4f60\u5f53\u5f3a\u6b32\u4e4b\u58f6\u662f\u50bb\u903c\u5417\uff0c\u9009\u4e2a\u6ca1\u6709\u7684\");\ncontinue;\n}\nSystem.out.printf(\"\u5feb\u70b9\u7ed9\u6211%.1f\u5e01\uff01\u5f3a\u6b32\u4e4b\u58f6\u4e0d\u53ef\u80fd\u51ed\u7a7a\u53d8\u51fa\u6765\uff01\\n\",\nprince[choice-1] * (1-discount));\ndouble coins = scanner.nextDouble();\nif(coins &lt; prince[choice-1] * (1-discount) &amp;&amp; coins != prince[choice-1] * (1-discount)) { System.out.println(\"\u4f60\u662f\u60f3\u7a7a\u624b\u5957\u767d\u72fc\u5417\uff0c\u7ed9\u6211\u7a0d\u5fae\u8ba4\u771f\u70b9\u963f\uff01\");\ncontinue;\n}\ndouble charge = coins - prince[choice-1] * (1-discount);\nSystem.out.printf(\"\u627e\u4f60%.1f\\n\",charge);\n}\n}\nprivate static double randomDiscount() { //5.\u57fa\u7840\u70b9\nreturn discountMin + (discountMax - discountMin) * random.nextDouble();\n}\n}\n</code></pre> <ol> <li>\u57fa\u7840\u70b9\uff1a\u968f\u673a\u8d4b\u503c\u7684\u8fd0\u7528</li> <li>\u57fa\u7840\u70b9\uff1a\u6784\u9020\u51fd\u6570\u7684\u8fd0\u7528</li> <li>\u57fa\u7840\u70b9\uff1a\u8f93\u5165\u7684\u8fd0\u7528</li> <li>\u57fa\u7840\u70b9\uff1a\u7c7b\u4f3cC\u8bed\u8a00\u8f93\u51fa\u7684\u65b9\u5f0f</li> <li>\u57fa\u7840\u70b9\uff1a\u6784\u9020\u51fd\u6570</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","title":"\u524d\u8a00","text":"<p>\u8fd9\u4e00\u7ae0\u662f\u6709\u5173\u4e8c\u53c9\u6811\u7684\uff0c\u4e0d\u4f1a\u6d89\u53ca\u7b97\u6cd5\u90e8\u5206\uff0c\u53ea\u6709\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\u548c\u666e\u901a\u7684\u904d\u5386\uff0c\u66f4\u591a\u7684\u4e8c\u53c9\u6811\u9898\u76ee\u4f1a\u653e\u5728\u7b97\u6cd5\u7bc7\u7ae0\u4e2d\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","title":"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49","text":"<p>\u4e8c\u53c9\u6811\uff0c\u4e00\u4e2a\u5de6\u8282\u70b9\uff0c\u4e00\u4e2a\u53f3\u8282\u70b9\uff0c\u4e00\u4e2a\u503c\uff0c\u4fbf\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7ed3\u70b9</p> <pre><code> struct TreeNode {\nint val;\nstruct TreeNode *left;\nstruct TreeNode *right;\n};\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","title":"\u4e8c\u53c9\u6811\u7684\u904d\u5386","text":"<p>\u4e8c\u53c9\u6811\u6709\u5f88\u591a\u79cd\u5947\u5947\u602a\u602a\u7684\u904d\u5386\uff0c\u8fd9\u91cc\u53ea\u8bb0\u5f55\u5c31\u57fa\u7840\u7684\u4e09\u79cd\uff0c\u524d\u4e2d\u540e\uff0c\u4e0d\u6392\u9664\u4ee5\u540e\u6dfb\u52a0\u4e00\u4e9b\u66f4\u6709\u610f\u4e49\u7684\u8fdb\u6765\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","title":"\u524d\u5e8f\u904d\u5386","text":"<pre><code>void preorder(struct TreeNode *root,int *res,int *returnSize) {\nif(root==NULL) {\nreturn NULL;\n}\nres[*returnSize]=root-&gt;val;\n(*returnSize)++;\npreorder(root-&gt;left,res,returnSize);\npreorder(root-&gt;right,res,returnSize);\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","title":"\u4e2d\u5e8f\u904d\u5386","text":"<pre><code>void preorder(struct TreeNode *root,int *res,int *returnSize) {\nif(root==NULL) {\nreturn NULL;\n}\npreorder(root-&gt;left,res,returnSize);\nres[*returnSize]=root-&gt;val;\n(*returnSize)++;\npreorder(root-&gt;right,res,returnSize);\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_6","title":"\u540e\u5e8f\u904d\u5386","text":"<pre><code>void preorder(struct TreeNode *root,int *res,int *returnSize) {\nif(root==NULL) {\nreturn NULL;\n}\npreorder(root-&gt;left,res,returnSize);\npreorder(root-&gt;right,res,returnSize);\nres[*returnSize]=root-&gt;val;\n(*returnSize)++;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"\u5b57\u7b26\u4e32","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","title":"\u524d\u8a00","text":"<p>\u8fd9\u662f\u4e00\u7ae0\u5173\u4e8e\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\uff0c\u6211\u672c\u6765\u60f3\u628a\u5b83\u653e\u5728\u7b97\u6cd5\u91cc\u9762\uff0c\u4f46\u662f\u60f3\u4e86\u4e00\u4e0b\u5b83\u4e0d\u5c5e\u4e8e\u7b97\u6cd5\u7684\u4e00\u7c7b\uff0c\u800c\u4e14\u5b83\u7684\u5b9a\u4e49\u6bd4\u8f83\u7279\u6b8a\uff0c\u57fa\u672c\u4e0a\u53ea\u7528\u4e00\u79cd\u65b9\u6cd5\u5c31\u53ef\u4ee5\u641e\u5b9a\u4e86\uff0c\u4e00\u4e9b\u548c\u5b57\u7b26\u4e32\u6709\u5173\u7684\u9898\u76ee\u5927\u90fd\u53ef\u4ee5\u8fd9\u4e48\u89e3\u51b3\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u52a0\u4e2a\u5feb\u6162\u6307\u9488\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","title":"\u5229\u7528\u6570\u7ec4\u89e3\u51b3\u5b57\u7b26\u4e32\u95ee\u9898","text":"<p>ASCII\u7801\u4e2d\uff0c\u5b57\u7b26\u4e32\u662f\u4ece32\u5230126\uff0c\u6211\u4eec\u4e00\u4e2a\u6570\u7ec4\u53ef\u4ee5\u8bbe\u7f6e\u6709256\u4e2a\u7a7a\u95f4(\u4e3b\u8981\u662f\u4e3a\u4e86\u8bd5\u9519\uff0c\u591a\u4e00\u70b9\u7a7a\u95f4\u4e5f\u4e0d\u4e00\u5b9a\u4f1a\u5360\u7528\u591a\u5927\u7684\u5185\u5b58)\uff0c\u6bd4\u5982\u8bbe\u7f6e\u4e00\u4e2a\u6570\u7ec4array[127]\uff0c\u90a3\u4e48array[48]\u4ee3\u8868\u7684\u5c31\u662f\u201c0\u201d\uff0c\u5927\u591a\u6570\u5b57\u7b26\u4e32\u95ee\u9898\uff0c\u901a\u5e38\u90fd\u662f\u4e0e\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\u6709\u5173\uff0c\u6bd4\u5982\u6211\u4eec\u6709\u4e24\u4e2a\u201c0\u201d\uff0c\u90a3\u4e48array[48]\u5c31\u53ef\u4ee5\u4e3a2\uff0c\u6709\u4e00\u4e2a\u5c31++\uff0c\u601d\u8def\u5927\u6982\u5c31\u662f\u8fd9\u6837\uff0c\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u7279\u522b\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u8981\u5f97\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u5168\u90e8\u5b57\u7b26\uff0c\u5fc5\u987b\u8981\u904d\u5386\uff0c\u904d\u5386\u80af\u5b9a\u8981\u4e00\u4e2a\u505c\u6b62\u6761\u4ef6\u6240\u4ee5<code>strlen()</code>\u8fd9\u4e2a\u51fd\u6570\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u62ec\u53f7\u91cc\u9762\u586b\u5165\u5b57\u7b26\u4e32\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u5148\u4e3e\u4e00\u4e9b\u4f8b\u9898\uff1a</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#1","title":"1. \u8d4e\u91d1\u4fe1","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\uff1aransomNote \u548c magazine \uff0c\u5224\u65ad ransomNote \u80fd\u4e0d\u80fd\u7531 magazine \u91cc\u9762\u7684\u5b57\u7b26\u6784\u6210\u3002</p> <p>\u5982\u679c\u53ef\u4ee5\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\u8fd4\u56de false \u3002</p> <p>magazine \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u53ea\u80fd\u5728 ransomNote \u4e2d\u4f7f\u7528\u4e00\u6b21\u3002</p> <p>\u793a\u4f8b1\uff1a</p> <pre><code>\u8f93\u5165\uff1aransomNote = \"a\", magazine = \"b\"\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u793a\u4f8b2\uff1a</p> <pre><code>\u8f93\u5165\uff1aransomNote = \"aa\", magazine = \"ab\"\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u793a\u4f8b3\uff1a</p> <pre><code>\u8f93\u5165\uff1aransomNote = \"aa\", magazine = \"aab\"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li> <li><code>ransomNote</code> \u548c <code>magazine</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210</li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>bool canConstruct(char * ransomNote, char * magazine){\nint lengthR,lengthM,i,max;\nlengthR=strlen(ransomNote);\nlengthM=strlen(magazine);\nint love[256]={0};\nfor(i=0;i&lt;lengthM;i++)\n{\nlove[magazine[i]]++;\n}\nfor(i=0;i&lt;lengthR;i++)\n{\nlove[ransomNote[i]]--;\n}\nfor(i=0;i&lt;256;i++)\n{\nif(love[i]&lt;0)\n{\nreturn false;\n}\n}\nreturn true;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#2","title":"2.\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u627e\u5230 \u5b83\u7684\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u7d22\u5f15 \u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de <code>-1</code> \u3002</p> <p>\u793a\u4f8b1\uff1a</p> <pre><code>\u8f93\u5165: s = \"leetcode\"\n\u8f93\u51fa: 0\n</code></pre> <p>\u793a\u4f8b2\uff1a</p> <pre><code>\u8f93\u5165: s = \"loveleetcode\"\n\u8f93\u51fa: 2\n</code></pre> <p>\u793a\u4f8b3\uff1a</p> <pre><code>\u8f93\u5165: s = \"aabb\"\n\u8f93\u51fa: -1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 105</code></li> <li><code>s</code> \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd</li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>int firstUniqChar(char * s){\nint length,i;\nlength=strlen(s);\nint count[127]={0};\nfor(i=0;i&lt;length;i++)\n{\ncount[s[i]]++;\n}\nfor(i=0;i&lt;length;i++)\n{\nif(count[s[i]]==1)\n{\nreturn i;\n}\n}\nreturn -1;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#3","title":"3.\u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad t \u662f\u5426\u662f s \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002</p> <p>\u6ce8\u610f\uff1a\u82e5 s \u548c t \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u76f8\u540c\uff0c\u5219\u79f0 s \u548c t \u4e92\u4e3a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002</p> <p>\u793a\u4f8b1\uff1a</p> <pre><code>\u8f93\u5165: s = \"anagram\", t = \"nagaram\"\n\u8f93\u51fa: true\n</code></pre> <p>\u793a\u4f8b2\uff1a</p> <pre><code>\u8f93\u5165: s = \"rat\", t = \"car\"\n\u8f93\u51fa: false\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li> <li><code>s</code> \u548c <code>t</code> \u4ec5\u5305\u542b\u5c0f\u5199\u5b57\u6bcd</li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>bool isAnagram(char * s, char * t){\nint lenS,lenT,i,love[256]={0};\nlenS=strlen(s);\nlenT=strlen(t);\nif(lenS!=lenT)\n{\nreturn false;\n}\nfor(i=0;i&lt;lenS;i++)\n{\nlove[s[i]]++;\n}\nfor(i=0;i&lt;lenT;i++)\n{\nlove[t[i]]--;\n}\nfor(i=0;i&lt;256;i++)\n{\nif(love[i]!=0)\n{\nreturn false;\n}\n}\nreturn true;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/","title":"\u6808\u4e0e\u961f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_1","title":"\u524d\u8a00","text":"<p>\u8fd9\u4e00\u7ae0\u662f\u5173\u4e8e\u6808\u7684\uff0c\u4e00\u4e9b\u548c\u6808\u6709\u5173\u7684\u77e5\u8bc6\u548c\u7528\u6cd5\u4f1a\u4fdd\u5b58\u5728\u8fd9\u91cc\u3002</p> <p>\u5927\u6982\u7387\u4f1a\u4f7f\u7528\u4e00\u4e9b\u94fe\u8868\u6765\u6784\u5efa\u6808\uff0c\u7528\u6570\u7ec4\u6784\u5efa\u6808\u66f4\u52a0\u65b9\u4fbf\u800c\u4e14\u5bb9\u6613\u7406\u89e3\uff0c\u4f46\u662f\u94fe\u8868\u662f\u65b0\u9c9c\u7684</p> <p>\u6240\u6709\u6211\u4f1a\u5206\u4e24\u90e8\u5206\u6765\u8bb0\u5f55\uff0c\u4e00\u90e8\u5206\u662f\u94fe\u8868\uff0c\u4e00\u90e8\u5206\u662f\u6570\u7ec4</p> <p>\u4ee3\u7801\u4e0d\u662f\u76f4\u63a5\u590d\u5236\u5c31\u80fd\u7528\u4e86\uff01\uff01\uff01\uff01\u8981\u66f4\u6539\u7684\uff01\uff01\uff01\uff01\uff01\uff01</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_2","title":"\u7528\u94fe\u8868\u6765\u5b9e\u73b0\u6808","text":"<p>\u7528\u94fe\u8868\u6765\u5b9e\u73b0\u6808\uff0c\u662f\u633a\u590d\u6742\u7684\uff0c\u4f46\u662f\u4e5f\u6709\u4e0d\u5c11\u4f18\u70b9\uff0c\u53ef\u4ee5\u52a8\u6001\u5206\u914d\u5185\u5b58\uff0c\u5360\u7528\u5c31\u5c11\u4e86\uff0c\u5185\u5b58\u5229\u7528\u4e5f\u9ad8\uff0c\u901f\u5ea6\u4e5f\u5feb\uff0c\u751a\u81f3\u53ef\u62d3\u5c55\u6027\u975e\u5e38\u5f3a\uff0c\u6bcf\u4e00\u6837\u90fd\u80dc\u8fc7\u6570\u7ec4\uff0c\u552f\u4e00\u7684\u7f3a\u70b9\u5c31\u662f\u4ee3\u7801\u4e66\u5199\u590d\u6742</p> <p>\u7528\u94fe\u8868\u6765\u5b9e\u73b0\u6808\uff0c\u53ef\u4ee5\u501f\u6570\u7ec4\u6765\u7406\u89e3\uff0c\u94fe\u8868\u5c31\u662f\u6570\u7ec4\u90e8\u5206\uff0c\u6570\u7ec4\u7684\u904d\u5386\u901a\u8fc7\u5e8f\u53f7\uff0c\u94fe\u8868\u7684\u904d\u5386\u901a\u8fc7\u4e0b\u4e00\u8282\u70b9\uff0c\u552f\u4e00\u6709\u533a\u522b\u7684\u5c31\u662f\uff0c\u6570\u7ec4\u7684\u5934\u6307\u9488\u5c31\u662f\u5f53\u524d\u5e8f\u53f7\uff0c\u800c\u94fe\u8868\u9700\u8981\u65b0\u5efa\u4e00\u4e2a\u5934\u6307\u9488\u6765\u6307\u5411\u4ed6\uff0c\u4e0b\u9762\u662f\u57fa\u7840\u4ee3\u7801\uff1a</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_3","title":"\u57fa\u7840\u90e8\u5206\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_4","title":"\u6808\u548c\u94fe\u8868\u7684\u5b9a\u4e49","text":"<pre><code>struct ListNode {\nint value;\nstruct ListNode* next;\n}; //\u8fd9\u4e00\u6b65\u662f\u5b9a\u4e49\u94fe\u8868\n</code></pre> <pre><code>struct Stack{\nstruct ListNode* top;\n}; //\u8fd9\u4e00\u6b65\u662f\u5b9a\u4e49\u4e00\u4e2a\u5934\u6307\u9488,\u4e5f\u5c31\u662f\u6808\u7684\u5934\u6307\u9488\uff0c\u6307\u5411\u6808\u9876\n</code></pre> <p>\u65e2\u7136\u662f\u4e00\u4e2a\u6808\uff0c\u5c31\u4f1a\u6709\u57fa\u7840\u7684\u64cd\u4f5c\uff0c\u6808\u7684\u5efa\u7acb\uff0c\u51fa\u6808\uff0c\u5165\u6808\uff0c\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u6709\u4e00\u4e9b\u6b65\u9aa4\u9700\u8981\u91ca\u653e\u5185\u5b58\u7684\uff0c\u6211\u5728\u793a\u4f8b\u4ee3\u7801\u4e2d\u5c31\u4e0d\u6dfb\u52a0\u4e86\uff0c\u793a\u4f8b\u4ee3\u7801:</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_5","title":"\u6808\u7684\u5efa\u7acb","text":"<pre><code>struct Stack* createStack() {\nstruct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack)); //\u7ed9\u6808\u52a8\u6001\u5206\u914d\u5185\u5b58\nstack-&gt;top = NULL; //\u6808\u9876\u6307\u5411\u7a7a\uff0c\u521d\u59cb\u5316\u5b9a\u4e49\u80af\u5b9a\u662f\u7a7a\nreturn stack;\n} //\u8fd9\u662f\u5efa\u7acb\u6808\u7684\u64cd\u4f5c\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_6","title":"\u5165\u6808","text":"<pre><code>void push(Stack* stack, int value) {\nstruct ListNode* List = (struct ListNode*)malloc(sizeof(struct ListNode)); //\u7ed9\u94fe\u8868\u5206\u914d\u7a7a\u95f4 1\nList-&gt;value = value;// 2\nList-&gt;next = stack-&gt;top;// 3\nstack-&gt;top = List;// 4\n} //\u8fd9\u662f\u5165\u6808\u7684\u64cd\u4f5c\uff0c\u7406\u89e3\u7a0d\u5fae\u96be\n</code></pre> <p>\u56fe\u89e3\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_7","title":"\u51fa\u6808","text":"<pre><code>int pop(Stack* stack) {\nif(stack-&gt;top == NULL) {\nreturn false;\n}\nint returnValue = stack-&gt;top-&gt;bracket;\nstruct ListNode* release = stack-&gt;top; //\u8981\u91ca\u653e\u6389\u5df2\u7ecf\u5f39\u51fa\u7684\u6808\nstack-&gt;top = stack-&gt;top-&gt;next;\nfree(release); //\u91ca\u653e\u5185\u5b58\nreturn returnValue;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_8","title":"\u5224\u65ad\u662f\u5426\u4e3a\u7a7a","text":"<pre><code>int isEmpty(Stack* stack) {\nif(!stack-&gt;top) {\nreturn 1;\n}\nelse {\nreturn 0;\n}\n} //\u8f93\u51fa\u6761\u4ef6\u53ef\u4ee5\u968f\u4fbf\u8f93\u51fa\uff0c\u53ea\u8981\u77e5\u9053stack-&gt;top\u7684\u5224\u65ad\u6761\u4ef6\u5c31\u53ef\u4ee5\u4e86\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_9","title":"\u9898\u76ee\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#1","title":"1. \u6709\u6548\u7684\u62ec\u53f7","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']' \u7684\u5b57\u7b26\u4e32 s \uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p> <p>\u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a</p> <ol> <li> <p>\u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002</p> </li> <li> <p>\u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002</p> </li> <li>\u6bcf\u4e2a\u53f3\u62ec\u53f7\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u76f8\u540c\u7c7b\u578b\u7684\u5de6\u62ec\u53f7\u3002</li> </ol> <p>\u793a\u4f8b1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"()\"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b2\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"()[]{}\"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b3\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"(]\"\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 104</code></li> <li><code>s</code> \u4ec5\u7531\u62ec\u53f7 <code>'()[]{}'</code> \u7ec4\u6210</li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>bool isValid(char * s){\nint len = strlen(s);\nif(len%2 != 0) {\nreturn false;\n}\nstruct Stack* mystack = createStack();\nchar bracketMid;\nfor(int i=0;i&lt;len;i++) {\nif(s[i]=='(') {\npush(mystack,')');\n}\nif(s[i]=='{') {\npush(mystack,'}');\n}\nif(s[i]=='[') {\npush(mystack,']');\n}\nif(s[i]==')') {\nbracketMid=pop(mystack);\nif(s[i]!=bracketMid) {\nreturn false;\n}\n}\nif(s[i]=='}') {\nbracketMid=pop(mystack);\nif(s[i]!=bracketMid) {\nreturn false;\n}\n}\nif(s[i]==']') {\nbracketMid=pop(mystack);\nif(s[i]!=bracketMid) {\nreturn false;\n}\n}\n}\nint mystackIsEmpyt = isEmpty(mystack);\nif(mystackIsEmpyt == 0) {\nreturn false;\n}\nreturn true;\n}\nint main() {\nchar* s = \"([]))\";\nif (isValid(s)) {\nprintf(\"true\");\n} else {\nprintf(\"false\\n\");\n}\nreturn 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#tip","title":"\u9898\u76ee\u5c0ftip","text":"<p>\u5728C\u8bed\u8a00\u4e2d\uff0c<code>malloc()</code>\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a<code>void*</code>\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5b83\u6307\u5411\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u9996\u5730\u5740\u3002\u7531\u4e8e<code>void*</code>\u7c7b\u578b\u7684\u6307\u9488\u4e0d\u80fd\u76f4\u63a5\u8d4b\u503c\u7ed9\u5176\u4ed6\u7c7b\u578b\u7684\u6307\u9488\u53d8\u91cf\uff0c\u56e0\u6b64\u901a\u5e38\u9700\u8981\u5c06\u5176\u5f3a\u5236\u8f6c\u6362\u4e3a\u76ee\u6807\u7c7b\u578b\u7684\u6307\u9488\u3002</p> <p>\u5728\u4f7f\u7528<code>malloc()</code>\u51fd\u6570\u5206\u914d\u5185\u5b58\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u8981\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u5927\u5c0f\uff0c\u800c\u5206\u914d\u7684\u5927\u5c0f\u901a\u5e38\u4e0e\u76ee\u6807\u7c7b\u578b\u7684\u5927\u5c0f\u6709\u5173\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8981\u5206\u914d\u4e00\u4e2a<code>struct Stack</code>\u7c7b\u578b\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));\n</code></pre> <p>\u5176\u4e2d\uff0c<code>sizeof(struct Stack)</code>\u8868\u793a<code>struct Stack</code>\u7c7b\u578b\u6240\u5360\u7528\u7684\u5b57\u8282\u6570\uff0c\u800c<code>(struct Stack*)</code>\u5219\u5c06\u8fd4\u56de\u7684<code>void*</code>\u7c7b\u578b\u6307\u9488\u5f3a\u5236\u8f6c\u6362\u4e3a<code>struct Stack*</code>\u7c7b\u578b\u6307\u9488\u3002</p> <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u7701\u7565\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u4f8b\u5982\uff1a</p> <pre><code>int* p = malloc(sizeof(int));\n</code></pre> <p>\u7531\u4e8e<code>malloc()</code>\u8fd4\u56de\u7684\u6307\u9488\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u4efb\u4f55\u7c7b\u578b\u7684\u6307\u9488\uff0c\u56e0\u6b64\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u7f16\u8bd1\u5668\u6216\u7f16\u8bd1\u5668\u8bbe\u7f6e\u4e2d\uff0c\u5982\u679c\u7701\u7565\u4e86\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8b66\u544a\u6216\u9519\u8bef\uff0c\u56e0\u6b64\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u5efa\u8bae\u59cb\u7ec8\u5728\u8c03\u7528<code>malloc()</code>\u51fd\u6570\u65f6\u663e\u5f0f\u5730\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_10","title":"\u7528\u6570\u7ec4\u6765\u5b9e\u73b0\u6808","text":"<p>\u8fd9\u4e2a\u6bd4\u8f83\u65b9\u4fbf\uff0c\u4e0d\u89e3\u91ca\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_11","title":"\u57fa\u7840\u90e8\u5206\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_12","title":"\u6808\u7684\u5b9a\u4e49\u4e0e\u5efa\u7acb","text":"<p>\u76f4\u63a5\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\uff0c\u548c\u4e00\u4e2a\u6574\u5f62\u53d8\u91cf\uff0c\u4f46\u662f\u6570\u7ec4\u7684\u5bb9\u91cf\u4e00\u5b9a\u8981\u591a\u4e00\u4e2a\uff0c\u56e0\u4e3a\u6709\u4e2a\u7a7a\u6808</p> <pre><code>int array[n], top=0;//top\u5c31\u662f\u6808\u9876\u6307\u9488\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_13","title":"\u5165\u6808","text":"<pre><code>array[top]=x;top++;\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_14","title":"\u51fa\u6808","text":"<pre><code>y=array[top];top--;\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_15","title":"\u5224\u65ad\u662f\u5426\u4e3a\u7a7a","text":"<pre><code>if(top == 0) {\nif(array[top] == NULL) {\nreturn true;\n}\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_16","title":"\u9898\u76ee\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#1_1","title":"1. \u6709\u6548\u7684\u62ec\u53f7","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']' \u7684\u5b57\u7b26\u4e32 s \uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p> <p>\u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a</p> <ol> <li>\u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002</li> <li>\u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002</li> <li>\u6bcf\u4e2a\u53f3\u62ec\u53f7\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u76f8\u540c\u7c7b\u578b\u7684\u5de6\u62ec\u53f7\u3002</li> </ol> <p>\u793a\u4f8b1\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"()\"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b2\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"()[]{}\"\n\u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b3\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"(]\"\n\u8f93\u51fa\uff1afalse\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>1 &lt;= s.length &lt;= 104</code></li> <li><code>s</code> \u4ec5\u7531\u62ec\u53f7 <code>'()[]{}'</code> \u7ec4\u6210</li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>char pairs(char a) {\nif (a == '}') return '{';\nif (a == ']') return '[';\nif (a == ')') return '(';\nreturn 0;\n}\nbool isValid(char* s) {\nint n = strlen(s);\nif (n % 2 == 1) {\nreturn false;\n}\nint stk[n + 1], top = 0;\nfor (int i = 0; i &lt; n; i++) {\nchar ch = pairs(s[i]);\nif (ch) {\nif (top == 0 || stk[top - 1] != ch) {\nreturn false;\n}\ntop--;\n} else {\nstk[top++] = s[i];\n}\n}\nreturn top == 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_17","title":"\u7528\u6808\u5b9e\u73b0\u961f\u5217","text":"<p>\u6808\u662f\u5148\u8fdb\u540e\u51fa\uff0c\u961f\u5217\u662f\u5148\u8fdb\u5148\u51fa\uff0c\u60f3\u8981\u5b9e\u73b0\u8fd9\u4e2a\u961f\u5217\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u521b\u5efa\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u8f93\u51fa\u6808\uff0c\u4e00\u4e2a\u8f93\u5165\u6808\uff0c\u628a\u6570\u636e\u5148\u5b58\u5165\u8f93\u5165\u6808\uff0c\u7136\u540e\u518d\u5f39\u51fa\uff0c\u5b58\u5165\u8f93\u51fa\u6808\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b8c\u6210\u5148\u8fdb\u5148\u51fa\uff0c\u6700\u540e\u518d\u628a\u8f93\u51fa\u6808\u7684\u6808\u9876\u5143\u7d20\u8bb0\u5f55\u7136\u540e\u5f39\u51fa\uff0c\u6700\u540e\u518d\u628a\u8f93\u51fa\u6808\u7684\u5185\u5bb9\u5b58\u5165\u8f93\u5165\u6808\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u9632\u6b62\u5faa\u5e8f\u88ab\u6253\u4e71</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_18","title":"\u57fa\u7840\u90e8\u5206:","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_19","title":"\u6808\u7684\u5b9a\u4e49\u4e0e\u521b\u7acb","text":"<pre><code>typedef struct {\nint stackInTop, stackOutTop;\nint stackIn[100], stackOut[100];\n} MyQueue;\n</code></pre> <pre><code>MyQueue* myQueueCreate() {\nMyQueue* queue = (MyQueue*)malloc(sizeof(MyQueue));\nqueue-&gt;stackInTop = 0;\nqueue-&gt;stackOutTop = 0;\nreturn queue;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_20","title":"\u5165\u6808","text":"<pre><code>void myQueuePush(MyQueue* obj, int x) {\nobj-&gt;stackIn[(obj-&gt;stackInTop)++] = x;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_21","title":"\u51fa\u6808","text":"<pre><code>int myQueuePop(MyQueue* obj) {\n//\u4f18\u5316\uff1a\u590d\u5236\u6808\u9876\u6307\u9488\uff0c\u51cf\u5c11\u5bf9\u5185\u5b58\u7684\u8bbf\u95ee\u6b21\u6570\nint stackInTop = obj-&gt;stackInTop;\nint stackOutTop = obj-&gt;stackOutTop;\n//\u82e5\u8f93\u51fa\u6808\u4e3a\u7a7a\nif(stackOutTop == 0) {\n//\u5c06\u7b2c\u4e00\u4e2a\u6808\u4e2d\u5143\u7d20\u590d\u5236\u5230\u7b2c\u4e8c\u4e2a\u6808\u4e2d\nwhile(stackInTop &gt; 0) {\nobj-&gt;stackOut[stackOutTop++] = obj-&gt;stackIn[--stackInTop];\n}\n}\n//\u5c06\u7b2c\u4e8c\u4e2a\u6808\u4e2d\u6808\u9876\u5143\u7d20\uff08\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\u51fa\u6808\uff0c\u5e76\u4fdd\u5b58\nint top = obj-&gt;stackOut[--stackOutTop];\n//\u5c06\u8f93\u51fa\u6808\u4e2d\u5143\u7d20\u653e\u56de\u8f93\u5165\u6808\u4e2d\nwhile(stackOutTop &gt; 0) {\nobj-&gt;stackIn[stackInTop++] = obj-&gt;stackOut[--stackOutTop];\n}\n//\u66f4\u65b0\u6808\u9876\u6307\u9488\nobj-&gt;stackInTop = stackInTop;\nobj-&gt;stackOutTop = stackOutTop;\n//\u8fd4\u56de\u961f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\nreturn top;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_22","title":"\u5224\u65ad\u662f\u5426\u4e3a\u7a7a","text":"<pre><code>bool myQueueEmpty(MyQueue* obj) {\nreturn obj-&gt;stackInTop == 0 &amp;&amp; obj-&gt;stackOutTop == 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_23","title":"\u83b7\u53d6\u961f\u5217\u51fa\u53e3\u5904\u7684\u5143\u7d20","text":"<pre><code>int myQueuePeek(MyQueue* obj) {\nreturn obj-&gt;stackIn[0];\n}\n</code></pre> <p>\u8fd9\u4e2a\u6709\u70b9\u591a\u4f59\u7684\u3002\u3002\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_24","title":"\u6808\u9876\u7f6e\u96f6","text":"<pre><code>void myQueueFree(MyQueue* obj) {\nobj-&gt;stackInTop = 0;\nobj-&gt;stackOutTop = 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#_25","title":"\u9898\u76ee\uff1a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#1_2","title":"1.\u7528\u6808\u5b9e\u73b0\u961f\u5217","text":"<p>\u8bf7\u4f60\u4ec5\u4f7f\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u5148\u5165\u5148\u51fa\u961f\u5217\u3002\u961f\u5217\u5e94\u5f53\u652f\u6301\u4e00\u822c\u961f\u5217\u652f\u6301\u7684\u6240\u6709\u64cd\u4f5c\uff08push\u3001pop\u3001peek\u3001empty\uff09\uff1a</p> <p>\u5b9e\u73b0 MyQueue \u7c7b\uff1a</p> <ul> <li> <p>void push(int x) \u5c06\u5143\u7d20 x \u63a8\u5230\u961f\u5217\u7684\u672b\u5c3e</p> </li> <li> <p>int pop() \u4ece\u961f\u5217\u7684\u5f00\u5934\u79fb\u9664\u5e76\u8fd4\u56de\u5143\u7d20</p> </li> <li>int peek() \u8fd4\u56de\u961f\u5217\u5f00\u5934\u7684\u5143\u7d20</li> <li>boolean empty() \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false</li> </ul> <p>\u8bf4\u660e\uff1a</p> <ul> <li>\u4f60 \u53ea\u80fd \u4f7f\u7528\u6807\u51c6\u7684\u6808\u64cd\u4f5c \u2014\u2014 \u4e5f\u5c31\u662f\u53ea\u6709 push to top, peek/pop from top, size, \u548c is empty \u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002</li> <li>\u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u6808\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u6808\uff0c\u53ea\u8981\u662f\u6807\u51c6\u7684\u6808\u64cd\u4f5c\u5373\u53ef\u3002</li> </ul> <p>\u793a\u4f8b1\uff1a</p> <pre><code>\u8f93\u5165\uff1a\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\n\u8f93\u51fa\uff1a\n[null, null, null, 1, 1, false]\n\n\u89e3\u91ca\uff1a\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>1 &lt;= x &lt;= 9</li> <li>\u6700\u591a\u8c03\u7528 100 \u6b21 push\u3001pop\u3001peek \u548c empty</li> <li>\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 peek \u64cd\u4f5c\uff09</li> </ul> <p>\u8fd9\u4e2a\u5c31\u4e0d\u653e\u4ee3\u7801\u4e86\uff0c\u4ee3\u7801\u51e0\u4e4e\u5c31\u662f\u57fa\u7840\u90e8\u5206</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%9F%A9%E9%98%B5/","title":"\u77e9\u9635","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%9F%A9%E9%98%B5/#_1","title":"\u524d\u8a00","text":"<p>\u867d\u7136\u5355\u72ec\u5f00\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u76ee\u5f55\uff0c\u5176\u5b9e\u4e0e\u7b97\u6cd5\u662f\u4ea4\u53c9\u7684\uff0c\u7b97\u6cd5\u79bb\u4e0d\u5f00\u6570\u636e\u7ed3\u6784\uff0c\u6709\u4e00\u4e9b\u9700\u8981\u6570\u636e\u7ed3\u6784\u7684\u652f\u6301\u3002\u7528\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u4e24\u65b9\u9762\u90fd\u60f3\u4ed4\u7ec6\u4e86\uff0c\u7b97\u6cd5\u5927\u591a\u548c\u6570\u636e\u7ed3\u6784\u7684\u4e00\u4e9b\u6709\u5173\uff0c\u94fe\u8868\u6307\u9488\u7b49\u7b49\uff0c\u6ca1\u601d\u8def\u7684\u65f6\u5019\u53ef\u4ee5\u5f80\u8fd9\u4e9b\u65b9\u9762\u60f3\u60f3\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%9F%A9%E9%98%B5/#_2","title":"\u77e9\u9635\u7684\u5b9a\u4e49\u4e0e\u521d\u59cb\u5316","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u4e8e\u521d\u5b66\u8005\u6bd4\u8f83\u590d\u6742\u7684\u7ed3\u6784\uff0c\u548c\u7ed3\u6784\u4f53\u7b80\u76f4\u5c31\u662f\u5c0f\u5deb\u89c1\u5927\u5deb\uff0c\u7ed3\u6784\u4f53\u5f88\u65b9\u4fbf\uff0c\u4f46\u662f\u77e9\u9635\u5728\u521d\u59cb\u5316\u548c\u5206\u914d\u7a7a\u95f4\u65b9\u9762\u662f\u6709\u70b9\u590d\u6742\u7684\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\u3002\u5199\u77e9\u9635\u4e3b\u8981\u662f\u4ed6\u7684\u5b9a\u4e49\u65b9\u5f0f\u548c\u521d\u59cb\u5316\u65b9\u5f0f\u3002</p> <p>\u5728\u5b9a\u4e49\u65b9\u5f0f\u548c\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u5148\u4e3e\u4e00\u4e2a\u4f8b\u9898\uff1a</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%9F%A9%E9%98%B5/#1","title":"1.\u91cd\u5851\u77e9\u9635","text":"<p>\u5728 MATLAB \u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570 reshape \uff0c\u5b83\u53ef\u4ee5\u5c06\u4e00\u4e2a m x n \u77e9\u9635\u91cd\u5851\u4e3a\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e0d\u540c\uff08r x c\uff09\u7684\u65b0\u77e9\u9635\uff0c\u4f46\u4fdd\u7559\u5176\u539f\u59cb\u6570\u636e\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u7531\u4e8c\u7ef4\u6570\u7ec4 mat \u8868\u793a\u7684 m x n \u77e9\u9635\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6b63\u6574\u6570 r \u548c c \uff0c\u5206\u522b\u8868\u793a\u60f3\u8981\u7684\u91cd\u6784\u7684\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002</p> <p>\u91cd\u6784\u540e\u7684\u77e9\u9635\u9700\u8981\u5c06\u539f\u59cb\u77e9\u9635\u7684\u6240\u6709\u5143\u7d20\u4ee5\u76f8\u540c\u7684 \u884c\u904d\u5386\u987a\u5e8f \u586b\u5145\u3002</p> <p>\u5982\u679c\u5177\u6709\u7ed9\u5b9a\u53c2\u6570\u7684 reshape \u64cd\u4f5c\u662f\u53ef\u884c\u4e14\u5408\u7406\u7684\uff0c\u5219\u8f93\u51fa\u65b0\u7684\u91cd\u5851\u77e9\u9635\uff1b\u5426\u5219\uff0c\u8f93\u51fa\u539f\u59cb\u77e9\u9635\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1amat = [[1,2],[3,4]], r = 1, c = 4\n\u8f93\u51fa\uff1a[[1,2,3,4]]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1amat = [[1,2],[3,4]], r = 2, c = 4\n\u8f93\u51fa\uff1a[[1,2],[3,4]]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-1000 &lt;= mat[i][j] &lt;= 1000</code></li> <li><code>1 &lt;= r, c &lt;= 300</code></li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>int** matrixReshape(int** mat, int matSize, int* matColSize, \nint r, int c, int* returnSize, int** returnColumnSizes){\n    int i,j;\n    int m = matSize;\n    int n = matColSize[0];\n    if(m*n!=r*c)\n    {\n        *returnSize=matSize;\n        *returnColumnSizes=matColSize;\n        return mat;\n    }\n\n    *returnSize = r;\n    *returnColumnSizes=malloc(sizeof(int)*r);\n    int** ans=malloc(sizeof(int*)*r);\n\n    for(i=0;i&lt;r;i++)\n    {\n        (*returnColumnSizes)[i]=c;\n        ans[i]=malloc(sizeof(int)*c);\n    }\n    for(j=0;j&lt;m*n;++j)\n    {\n        ans[j/c][j%c]=mat[j/n][j%n];//\u70b9\u775b\u4e4b\u7b14\n    }\n    return ans;\n}\n</code></pre> <p>\u6700\u5f00\u59cb\u90e8\u5206\u4e0d\u505a\u8003\u8651\uff0cmn!=rc\u8fd9\u4e00\u4e2a\u6b65\u9aa4\u4ec5\u4ec5\u662f\u4e3a\u4e86\u9898\u610f</p> <pre><code>*returnSize = r;\n*returnColumnSizes=malloc(sizeof(int)*r);\nint** ans=malloc(sizeof(int*)*r);\n</code></pre> <p>\u8fd9\u4e00\u5757\u662f\u65b0\u77e9\u9635\u7684\u521d\u59cb\u5316\uff0c\u8fd9\u91cc\u6709\u4e24\u4e2a\u9898\u76ee\u7ed9\u7684\u6307\u9488\u53d8\u91cf\u548c\u4e00\u4e2a\u6211\u81ea\u5df1\u8bbe\u7acb\u7684\u4e8c\u7ef4\u6570\u7ec4\u6307\u9488\uff0c\u7b2c\u4e00\u4e2areturnSize\u53ef\u4ee5\u901a\u4fd7\u7684\u8ba4\u4e3a\u662f\u77e9\u9635\u7684\u957f\uff0c\u5728\u5b9a\u4e49\u77e9\u9635\u957f\u7684\u65f6\u5019\u4e0d\u9700\u8981\u5206\u914d\u7a7a\u95f4\uff0c\u4e00\u4e2a\u77e9\u9635\u7684\u5b9a\u4e49\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5148\u5b9a\u4e00\u8fb9\uff0c\u7136\u540e\u5229\u7528\u79ef\u5206\u4e58\u8be5\u8fb9\uff0c\u6700\u540e\u5f62\u6210\u4e00\u4e2a\u77e9\u5f62\uff0c\u5728\u5206\u914d\u77e9\u5f62\u7a7a\u95f4\u4e5f\u662f\u8fd9\u79cd\u60f3\u6cd5\uff0c\u4e0a\u9762\u8fd9\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u4f53\u73b0\uff0creturnSize\u5b9a\u4e86\u4e4b\u540e\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u503c\uff0c\u90a3\u4e48\u5728\u5206\u914d\u6bcf\u4e00\u884c\u7684\u7a7a\u95f4\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u6309\u7167\u6211\u8bf4\u7684\u79ef\u5206\u6cd5\u4e00\u70b9\u4e00\u70b9\u5206\u914d\uff0c\u8fd9\u5c31\u662f\u7b2c\u4e8c\u884c\u4ee3\u7801\uff0c\u4ee5\u4e0a\u7684\u6b65\u9aa4\u90fd\u662f\u89e3\u51b3\u65b0\u77e9\u9635\u7684\u5c5e\u6027\u95ee\u9898\uff0c\u7b2c\u4e09\u884c\u4ee3\u7801\u624d\u662f\u8fd9\u4e2a\u77e9\u9635\u7684\u521d\u59cb\u5316\u5206\u914d\uff0c\u5c31\u662f\u7ed9\u77e9\u9635\u7684\u957f\u5206\u914d\u7a7a\u95f4\u3002</p> <pre><code>for(i=0;i&lt;r;i++)\n{\n(*returnColumnSizes)[i]=c;\nans[i]=malloc(sizeof(int)*c);\n}\n</code></pre> <p>\u8fd9\u4e00\u4e2a\u6b65\u9aa4\u5219\u662f\u5229\u7528\u4e0a\u9762\u5df2\u7ecf\u5206\u914d\u597d\u7684\u957f\u7684\u5185\u5b58\uff0c\u5206\u914d\u5bbd\u7684\u5185\u5b58\uff0c\u56e0\u4e3a\u77e9\u9635\u7684\u5f62\u5f0f\u662fans[i] [j]\u7684\u5f62\u5f0f\uff0cans[i]\u5219\u53ef\u4ee5\u8ba4\u4e3a\u662f\u957f\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/","title":"\u94fe\u8868","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_1","title":"\u524d\u8a00","text":"<p>\u8fd9\u4e00\u7bc7\u662f\u5173\u4e8e\u94fe\u8868\u7684\u77e5\u8bc6\uff0c\u94fe\u8868\u4e3b\u8981\u8fd8\u662f\u7ed3\u5408\u7b97\u6cd5\u4f7f\u7528\uff0c\u4f46\u662f\u5728\u8fd9\u4e00\u7bc7\u4e0d\u6d89\u53ca\u7b97\u6cd5\uff0c\u53ea\u662f\u8c08\u8bba\u94fe\u8868\u7684\u77e5\u8bc6\uff0c\u5355\u7eaf\u7684\u94fe\u8868\u77e5\u8bc6\u3002</p> <p>\u94fe\u8868\u5728\u67d0\u4e9b\u65b9\u9762\u548c\u6570\u7ec4\u5f88\u76f8\u4f3c\uff0c\u5927\u81f4\u53ef\u4ee5\u7528\u6570\u7ec4\u6765\u7406\u89e3\u3002\u8fd9\u91cc\u6211\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff0c\u4e00\u79cd\u662f\u8fd4\u56de\u94fe\u8868\u7684\u7c7b\u578b\uff0c\u4e00\u79cd\u662f\u8fd4\u56de\u8282\u70b9\u7684\u7c7b\u578b\uff0c\u81f3\u4e8e\u662f\u54ea\u79cd\u770b\u4e2a\u4eba\u9700\u8981\uff0c\u94fe\u8868\u7684\u4fee\u6539\uff0c\u5f88\u5c11\u662f\u5728\u539f\u94fe\u8868\u4e0a\u66f4\u6539\uff0c\u4ecd\u7136\u6709\u865a\u62df\u5934\u8282\u70b9\u7684\u65b9\u6cd5\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_2","title":"\u865a\u62df\u5934\u8282\u70b9","text":"<p>\u8bbe\u7f6e\u4e00\u4e2a\u865a\u62df\u7684\u5934\u8282\u70b9\uff0c\u7136\u540e\u8bbe\u7f6e\u4e00\u4e2a\u65b0\u6307\u9488\u6765\u8fdb\u884c\u904d\u5386\u3002</p> <p>eg\uff1a</p> <p><code>struct ListNode *list3 = malloc(sizeof(struct ListNode));</code></p> <p><code>struct ListNode *head1 = list3;</code></p> <p>\u5148\u4e0a\u9898\u76ee\u4f8b\u5b50\uff1a</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#1","title":"1.\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<p>\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 </p> <p>\u793a\u4f8b1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1al1 = [1,2,4], l2 = [1,3,4]\n\u8f93\u51fa\uff1a[1,1,2,3,4,4]\n</code></pre> <p>\u793a\u4f8b2\uff1a</p> <pre><code>\u8f93\u5165\uff1al1 = [], l2 = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u793a\u4f8b3\uff1a</p> <pre><code>\u8f93\u5165\uff1al1 = [], l2 = [0]\n\u8f93\u51fa\uff1a[0]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u4e24\u4e2a\u94fe\u8868\u7684\u8282\u70b9\u6570\u76ee\u8303\u56f4\u662f <code>[0, 50]</code></li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>l1</code> \u548c <code>l2</code> \u5747\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5217</li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\nstruct ListNode *list3 = malloc(sizeof(struct ListNode));\nstruct ListNode *head1 = list3;\nwhile(list1 != NULL &amp;&amp; list2 != NULL) {\nif(list1-&gt;val &lt;= list2-&gt;val) {\nhead1-&gt;next = list1;\nlist1 = list1-&gt;next;\n}\nelse {\nhead1-&gt;next = list2;\nlist2 = list2-&gt;next;\n}\nhead1 = head1-&gt;next;\n}\nif(list1 != NULL) {\nhead1-&gt;next = list1;\n}\nif(list2 != NULL) {\nhead1-&gt;next = list2;\n}\nreturn list3-&gt;next;\n}\n</code></pre> <p>\u7136\u540e\u662f\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#2","title":"2.\u79fb\u9664\u94fe\u8868\u5143\u7d20","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 <code>head</code> \u548c\u4e00\u4e2a\u6574\u6570 <code>val</code> \uff0c\u8bf7\u4f60\u5220\u9664\u94fe\u8868\u4e2d\u6240\u6709\u6ee1\u8db3 <code>Node.val == val</code> \u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de \u65b0\u7684\u5934\u8282\u70b9 \u3002</p> <p>\u793a\u4f8b1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2,6,3,4,5,6], val = 6\n\u8f93\u51fa\uff1a[1,2,3,4,5]\n</code></pre> <p>\u793a\u4f8b2\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = [], val = 1\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u793a\u4f8b3\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = [7,7,7,7], val = 7\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u5217\u8868\u4e2d\u7684\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 <code>[0, 104]</code> \u5185</li> <li><code>1 &lt;= Node.val &lt;= 50</code></li> <li><code>0 &lt;= val &lt;= 50</code></li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* removeElements(struct ListNode* head, int val){\nstruct ListNode *dummy = malloc(sizeof(struct ListNode));\ndummy-&gt;next = head;\nstruct ListNode *cur = dummy;\nwhile(cur != NULL &amp;&amp; cur-&gt;next != NULL) {\nif(cur-&gt;next-&gt;val == val) {\ncur-&gt;next=cur-&gt;next-&gt;next;\n}\nelse {\ncur = cur-&gt;next;\n}\n}\nreturn dummy-&gt;next;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_3","title":"\u94fe\u8868\u7684\u9012\u5f52","text":"<p>\u5982\u679c\u6709\u4e00\u4e9b\u9898\u76ee\u9700\u8981\u4e00\u4e2a\u94fe\u8868\u904d\u5386\u5230\u94fe\u8868\u7684\u6700\u540e\u4e00\u4f4d\u800c\u4e0d\u6539\u53d8\u94fe\u8868\u7684\u7ed3\u6784\uff0c\u53ef\u4ee5\u5229\u7528\u9012\u5f52\u4e00\u76f4\u9012\u5f52\u5230\u6700\u540e\u4e00\u4f4d\u3002</p> <p>\u76f4\u63a5\u4e0a\u4f8b\u9898\uff1a</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#1_1","title":"1.\u53cd\u8f6c\u94fe\u8868","text":"<p>\u7ed9\u4f60\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 <code>head</code> \uff0c\u8bf7\u4f60\u53cd\u8f6c\u94fe\u8868\uff0c\u5e76\u8fd4\u56de\u53cd\u8f6c\u540e\u7684\u94fe\u8868\u3002</p> <p>\u793a\u4f8b1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2,3,4,5]\n\u8f93\u51fa\uff1a[5,4,3,2,1]\n</code></pre> <p>\u793a\u4f8b2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2]\n\u8f93\u51fa\uff1a[2,1]\n</code></pre> <p>\u793a\u4f8b3\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = []\n\u8f93\u51fa\uff1a[]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u8303\u56f4\u662f <code>[0, 5000]</code></li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* reverseList(struct ListNode* head){\nif(head == NULL || head-&gt;next == NULL) {\nreturn head;\n}\nstruct ListNode *head1;\nhead1 = reverseList(head-&gt;next);\nhead-&gt;next-&gt;next = head;\nhead-&gt;next = NULL;\nreturn head1;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_4","title":"\u53cc\u94fe\u8868\u79fb\u52a8","text":"<p>\u8fd9\u79cd\u5c31\u662f\u53cc\u94fe\u8868\u79fb\u52a8\uff0c\u6709\u65f6\u5019\u53ef\u4ee5\u548c\u5feb\u6162\u6307\u9488\u5173\u8054\u4e00\u8d77\u4f7f\u7528</p> <p>eg:</p> <p><code>struct ListNode* one=head;</code></p> <p><code>` struct ListNode* two=head-&gt;next;</code></p> <p>\u4e0a\u4f8b\u9898\uff1a</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#1_2","title":"1.\u73af\u5f62\u94fe\u8868","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002</p> <p>\u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a next \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u6ce8\u610f\uff1apos \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012 \u3002\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002</p> <p>\u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u73af \uff0c\u5219\u8fd4\u56de true \u3002 \u5426\u5219\uff0c\u8fd4\u56de false \u3002</p> <p>\u793a\u4f8b1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [3,2,0,-4], pos = 1\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002\n</code></pre> <p>\u793a\u4f8b2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1,2], pos = 0\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\n</code></pre> <p>\u793a\u4f8b3\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1ahead = [1], pos = -1\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u8303\u56f4\u662f <code>[0, 104]</code></li> <li><code>-105 &lt;= Node.val &lt;= 105</code></li> <li><code>pos</code> \u4e3a <code>-1</code> \u6216\u8005\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a \u6709\u6548\u7d22\u5f15 \u3002</li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nbool hasCycle(struct ListNode *head) {\nif(head==NULL||head-&gt;next==NULL)\n{\nreturn false;\n}\nstruct ListNode* one=head;\nstruct ListNode* two=head-&gt;next;\nwhile(one!=two)\n{\nif(two==NULL||two-&gt;next==NULL)\n{\nreturn false;\n}\none=one-&gt;next;\ntwo=two-&gt;next-&gt;next;\n}\nreturn true;\n}\n</code></pre>"},{"location":"%E6%9D%82%E9%A1%B9/Mkdocs%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%B8%8A%E4%BC%A0/","title":"mkdocs\u6587\u4ef6\u4e0a\u4f20","text":"<p><code>git add .</code></p> <p><code>git commit -m\"version-x.x\"</code>        \u5176\u4e2dx.x\u662f\u7248\u672c\u53f7\uff0c\u968f\u4fbf\u5199\u7684</p> <p><code>git push -u origin master</code></p> <p><code>mkdocs gh-deploy</code></p>"},{"location":"%E7%AE%97%E6%B3%95/DP/","title":"DP","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#_1","title":"\u524d\u8a00","text":"<p>\u52a8\u6001\u89c4\u5212\u76f8\u5173\uff0cdp\u7684\u9898\u76ee\u90fd\u5728\u8fd9</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#dp","title":"DP\u57fa\u672c\u4e94\u6b65","text":"<ol> <li>dp\u6570\u7ec4\u4ee5\u53ca\u4e0b\u6807\u7684\u542b\u4e49</li> <li>\u9012\u63a8\u516c\u5f0f</li> <li>dp\u6570\u7ec4\u5982\u4f55\u521d\u59cb\u5316</li> <li>\u904d\u5386\u5faa\u5e8f</li> <li>\u6253\u5370\u6570\u7ec4</li> </ol> <p>\u53ef\u4ee5\u9075\u5faa\u8fd9\u4e94\u90e8\u6765\u5199\u9898\uff0c\u7f51\u4e0a\u5f88\u591a\u6559\u7a0b\u4e0d\u591a\u8bf4</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#_2","title":"\u9898\u76ee\uff1a","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#_3","title":"\u6590\u6ce2\u90a3\u5951","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#_4","title":"\u57fa\u7840\u9898\uff1a","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#1","title":"1.\u722c\u697c\u68af","text":"<p>\u57fa\u7840\u9898\u76ee\uff0c\u7528\u6765\u719f\u7ec3\u52a8\u6001\u89c4\u5212\uff0c\u4e0d\u591a\u8bf4\uff0c\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u4f46\u662f\u53ef\u4ee5\u62d3\u5c55\uff0c\u9898\u76ee\u53ea\u662f\u8bf4\u4e00\u6b65\u80fd\u8fc8\u4e00\u4e2a\u53f0\u9636\u6216\u8005\u4e24\u4e2a\u53f0\u9636\uff0c\u5982\u679c\u662fM\u6b65\u5462\uff0c\u8fd9\u53ef\u4ee5\u62d3\u5c55\u7684\uff0cM\u6b65\u5c31\u662f\u5b8c\u5168\u80cc\u5305</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#_5","title":"\u8be5\u9898\u7684\u62d3\u5c55\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#_6","title":"\u53d8\u5f0f\u9898\uff1a","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#1_1","title":"1.\u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af","text":"<p>\u8fd9\u4e2a\u662f\u53d8\u5f0f\uff0c\u53ef\u4ee5\u7528\u6765\u7ec3\u624b\uff0c\u9012\u63a8\u548c\u904d\u5386\u5f88\u91cd\u8981</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#2","title":"2.\u6253\u5bb6\u52ab\u820d","text":"<p>\u8fd9\u4e2a\u548c\u4e0a\u4e00\u9898\u4e5f\u662f\u5dee\u4e0d\u591a\u7684\u601d\u8def\uff0c\u4f46\u662f\u521d\u59cb\u5316\u8981\u6ce8\u610f\uff0c\u8fd8\u6709\u6570\u7ec4\u5927\u5c0f\u4e0d\u4e00\u6837\u65f6\u5019\u7684\u60c5\u51b5</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#3","title":"3. \u5220\u9664\u5e76\u83b7\u5f97\u70b9\u6570","text":"<p>\u8fd9\u4e2a\u662f\u6253\u5bb6\u52ab\u820d\u7684\u53d8\u5f0f\uff0c\u4e2d\u7b49\u9898\u76ee\uff0c\u5f88\u9002\u5408\u601d\u8003\u4e00\u4e9b\u62d3\u5c55\u7684\u65b9\u5f0f</p> <p>\u4e3b\u8981\u5c31\u662f\u623f\u5c4b\u7684\u65b9\u5f0f\u6539\u53d8\u4e86\uff0c\u8fd9\u662f\u8981\u8003\u8651\u7684</p> <p>\u9012\u5f52\u7684\u65b9\u5f0f\u4ecd\u7136\u4e0d\u53d8</p> <pre><code>int sumsSize=0;\nfor(int i=0;i&lt;numsSize;i++) {\nsumsSize=fmax(sumsSize,nums[i]);\n}\nint sums[sumsSize+1];\nmemset(sums,0,sizeof(sums));\nfor(int i=0;i&lt;numsSize;i++) {\nsums[nums[i]] += nums[i];\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/DP/#_7","title":"\u77e9\u9635","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#_8","title":"\u57fa\u7840\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#1_2","title":"1.\u4e0d\u540c\u8def\u5f84","text":"<p>\u77e9\u9635\u7c7b\u578b\u7684\u57fa\u7840\u9898</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#2_1","title":"2.\u6700\u5c0f\u8def\u5f84\u548c","text":"<p>\u6ce8\u610f\u5728\u529b\u6263\u79cd\u77e9\u9635\u7684\u8d4b\u503c\u4e3an=gridColSize[0];</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#_9","title":"\u53d8\u5f0f\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#1-ii","title":"1.\u4e0d\u540c\u8def\u5f84 II","text":"<p>\u54e5\u4eec\u4ee5\u540e\u6ce8\u610f\u4e00\u4e0b\u6570\u7ec4\u7c7b\u578b\uff0clonglongint\u6709\u65f6\u5019\u8fd8\u662f\u53ef\u80fd\u7684</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#2_2","title":"2.\u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c","text":"<p>\u8fd9\u4e2a\u77e9\u9635\u7684\u8d4b\u503c\u53c8\u548c2.\u6700\u5c0f\u8def\u5f84\u548c\u4e0d\u4e00\u6837\uff0c\u770b\u6765\u662f\u8981\u770b\u5177\u4f53\u60c5\u51b5\u7684</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#3_1","title":"3.\u6700\u5927\u6b63\u65b9\u5f62","text":"<p>\u8fd9\u4e2a\u6700\u91cd\u8981\u662f\u77e5\u9053\u72b6\u6001\u8f6c\u79fb</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#_10","title":"\u5b57\u7b26\u4e32","text":"<p>\u8fd9\u4e2a\u591f\u590d\u6742\u4e86\uff0c\u6bcf\u6b21\u8003\u8651\u90fd\u4e0d\u4e00\u6837\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#_11","title":"\u57fa\u7840\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#1_3","title":"1. \u6700\u957f\u56de\u6587\u5b50\u4e32","text":"<p>\u867d\u7136\u770b\u8d77\u6765\u50cf\u57fa\u7840\u9898\uff0c\u5b9e\u9645\u4e5f\u82b1\u65f6\u95f4\uff0c\u904d\u5386\u7684\u8fc7\u7a0b\u9700\u8981\u6ce8\u610f\uff0cDP\u6570\u7ec4\u7684\u503c\u7684\u542b\u4e49\uff0c\u8fd8\u6709\u6700\u7ec8\u8f93\u51fa</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#2_3","title":"2.\u5355\u8bcd\u62c6\u5206","text":"<p>\u8fd9\u4e2a\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u51fd\u6570\uff0cC\u8bed\u8a00\u7684\u51fd\u6570\uff0c\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u540c</p> <pre><code>strncmp(s1,s2,length)\n\u6bd4\u8f83s1\u4e0es2\u7684length\u957f\u5ea6\u5185\u7684\u503c\u662f\u5426\u76f8\u540c\ns1&gt;s2 \u8fd4\u56de\u5927\u4e8e0\u7684\u503c\ns1&lt;s2 \u8fd4\u56de\u5c0f\u4e8e0\u7684\u503c\n\u76f8\u540c\u8fd4\u56de0\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7528\u6cd5\uff1a</p> <pre><code>S=\"babaaaddd\"\n\u4e00\u4e2a\u5b57\u7b26\u4e32S\uff0cS+3\n\u8f93\u51faS\u4e3aaaaddd\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/DP/#3_2","title":"3.\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217","text":"<p>\u904d\u5386\u5faa\u5e8f\uff0c\u4ece\u540e\u9762\u5f00\u59cb\u904d\u5386\u80fd\u4fdd\u8bc1\u540e\u8fb9\u754c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#4ascii","title":"4.\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5c0fASCII\u5220\u9664\u548c","text":"<p>\u8fd9\u4e2a\u4e5f\u662f\u7f16\u8f91\u8ddd\u79bb\u7684\u53d8\u5f0f\uff0c\u53ea\u4e0d\u8fc7\u662f\u6362\u6210\u8f93\u51faASCII\u7801\u800c\u5df2</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#_12","title":"\u62d3\u5c55\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/DP/#1_4","title":"1.\u7f16\u8f91\u8ddd\u79bb","text":"<p>\u8fd9\u4e2a\u6700\u91cd\u8981\u5c31\u7b97DP\u7684\u521d\u59cb\u5316\u548c\u5b9a\u4e49\uff0c\u72b6\u6001\u65b9\u7a0b\u5012\u662f\u53ef\u4ee5\u63a8\u5bfc</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#2_4","title":"2.\u4e0d\u540c\u7684\u5b50\u5e8f\u5217","text":"<p>\u8fd9\u4e2a\u5c31\u662f\u4e0a\u9762\u90a3\u4e2a\u7684\u53d8\u5f0f\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u662f\u8bb0\u5f55\u6b21\u6570\uff0c\u4e0d\u9700\u8981\u7b97\u5220\u51cf\u6b21\u6570</p>"},{"location":"%E7%AE%97%E6%B3%95/DP/#_13","title":"\u80cc\u5305\u95ee\u9898","text":"<p>\u5982\u679c\u6c42\u7ec4\u5408\u6570\u5c31\u662f\u5916\u5c42for\u5faa\u73af\u904d\u5386\u7269\u54c1\uff0c\u5185\u5c42for\u904d\u5386\u80cc\u5305\u3002</p> <p>\u5982\u679c\u6c42\u6392\u5217\u6570\u5c31\u662f\u5916\u5c42for\u904d\u5386\u80cc\u5305\uff0c\u5185\u5c42for\u5faa\u73af\u904d\u5386\u7269\u54c1\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/","title":"\u6570\u7ec4\u6392\u5e8f","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/#_1","title":"\u524d\u8a00","text":"<p>\u8fd9\u662f\u8bb0\u5f55\u6570\u7ec4\u7c7b\u7b97\u6cd5\u7684\u4e00\u9875\uff0c\u4f1a\u8bb0\u5f55\u5404\u79cd\u5947\u5947\u602a\u602a\u7684\u7b97\u6cd5\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/#_2","title":"\u5355\u6b21\u904d\u5386\u8d2a\u5fc3","text":"<p>\u6211\u8ba4\u4e3a\u8fd9\u79cd\u5176\u5b9e\u4e5f\u4e0d\u5c5e\u4e8e\u8d2a\u5fc3\uff0c\u53ea\u662f\u56e0\u4e3a\u90fd\u662f\u627e\u6700\u4f73\uff0c\u6240\u4ee5\u6211\u5199\u4e86\u8d2a\u5fc3\uff0c\u53c8\u56e0\u4e3a\u662f\u65e0\u6cd5\u56de\u5934\u7684\u90a3\u79cd\u904d\u5386\u5f62\u5f0f\uff0c\u6240\u4ee5\u6211\u53eb\u5b83\u5355\u6b21\u904d\u5386\uff0c\u4f46\u662f\u601d\u8def\u662f\u5dee\u4e0d\u591a\u7684\u3002</p> <p>\u601d\u8def\uff1a</p> <ol> <li>\u4e00\u6b21\u904d\u5386</li> <li>\u6570\u503c\u66ff\u4ee3</li> <li>\u5927\u5c0f\u6bd4\u8f83</li> </ol> <p>\u4e00\u6b21\u904d\u5386\u5c31\u662f\u987e\u540d\u601d\u4e49\u7684\u904d\u5386\u4e00\u6b21\u5c31\u591f\u4e86\uff0c\u56e0\u4e3a\u65e0\u6cd5\u56de\u5934\uff0c\u6570\u503c\u66ff\u4ee3\uff0c\u56e0\u4e3a\u662f\u8d2a\u5fc3\uff0c\u80af\u5b9a\u8981\u6570\u503c\u66ff\u6362\u7684\uff0c\u5982\u679c\u5f53\u524d\u503c\u4e0d\u6ee1\u8db3\u9898\u610f\uff0c\u90a3\u5c31\u6362\u6570\u7ec4\u4e2d\u7684\u4e0b\u4e00\u503c\uff0c\u5927\u5c0f\u6bd4\u8f83\u6307\u7684\u662f\u8fd4\u56de\u7684\u6700\u7ec8\u503c\u3002</p> <p>\u4e3e\u4e24\u9053\u4f8b\u9898\uff1a</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/#1","title":"1.\u6700\u5927\u5b50\u6570\u7ec4\u548c","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \uff0c\u8bf7\u4f60\u627e\u51fa\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002\u5b50\u6570\u7ec4 \u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u90e8\u5206\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [-2,1,-3,4,-1,2,1,-5,4]\n\u8f93\u51fa\uff1a6\n\u89e3\u91ca\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [1]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [5,4,-1,7,8]\n\u8f93\u51fa\uff1a23\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= nums.length &lt;= 105\n-104 &lt;= nums[i] &lt;= 104\n</code></pre> <p>\u5206\u6790\uff1a\u8fd9\u4e2a\u5c31\u662f\u6700\u5178\u578b\u7684\u8d2a\u5fc3\uff0c\u5176\u5b9e\u5f88\u591a\u65b9\u6cd5\uff0c\u6709DP\u548c\u8d2a\u5fc3\u4f46\u662f\uff0c\u6700\u7b80\u6d01\u7684\u4e5f\u6700\u5bb9\u6613\u7406\u89e3\u7684\u8fd8\u662f\u5355\u6b21\u904d\u5386\u8d2a\u5fc3</p> <p>\u4ee3\u7801\uff1a</p> <pre><code>int maxSubArray(int* nums, int numsSize){\n    int i,max=nums[0],sum=0;\n\n    for(i=0;i&lt;numsSize;i++)\n    {\n        sum=sum+nums[i];\n        if(sum&lt;nums[i])\n        {\n            sum=nums[i];\n        }\n        if(max&lt;=sum)\n        {\n            max=sum;\n        }\n    }\n\n    return max;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/#2","title":"2. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 prices \uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20 prices[i] \u8868\u793a\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002</p> <p>\u4f60\u53ea\u80fd\u9009\u62e9 \u67d0\u4e00\u5929 \u4e70\u5165\u8fd9\u53ea\u80a1\u7968\uff0c\u5e76\u9009\u62e9\u5728 \u672a\u6765\u7684\u67d0\u4e00\u4e2a\u4e0d\u540c\u7684\u65e5\u5b50 \u5356\u51fa\u8be5\u80a1\u7968\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002</p> <p>\u8fd4\u56de\u4f60\u53ef\u4ee5\u4ece\u8fd9\u7b14\u4ea4\u6613\u4e2d\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u5982\u679c\u4f60\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u5229\u6da6\uff0c\u8fd4\u56de 0 \u3002</p> <p>\u793a\u4f8b1\uff1a</p> <pre><code>\u8f93\u5165\uff1a[7,1,5,3,6,4]\n\u8f93\u51fa\uff1a5\n\u89e3\u91ca\uff1a\u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6\n = 6-1 = 5 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\uff1b\u540c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u524d\u5356\n\u51fa\u80a1\u7968\u3002\n</code></pre> <p>\u793a\u4f8b2\uff1a</p> <pre><code>\u8f93\u5165\uff1aprices = [7,6,4,3,1]\n\u8f93\u51fa\uff1a0\n\u89e3\u91ca\uff1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= prices.length &lt;= 105\n0 &lt;= prices[i] &lt;= 104\n</code></pre> <p>\u5206\u6790\uff1a\u4e0d\u591a\u8bf4\uff0c\u627e\u4e00\u4e2a\u6700\u5c0f\u7684\uff0c\u627e\u4e00\u4e2a\u6700\u5927\u7684\uff0c\u8981\u662f\u80fd\u7528\u4eba\u8111\uff0c\u6570\u636e\u5c0f\u7684\u8bdd\u4f1a\u5f88\u5feb\uff0c\u4f46\u662f\u5982\u679c\u6570\u636e\u5927\u5c31\u4e0d\u884c\u4e86\uff0c\u4e0d\u8fc7\u4e00\u6b21\u904d\u5386\u4ed6\u7684\u65f6\u95f4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u4f1a\u5f88\u5927\uff0c\u8fd8\u662f\u539f\u6765\u7684\u601d\u8def\u4e00\u6b21\u904d\u5386\uff0c\u6570\u503c\u66ff\u6362\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c\u4e00\u6b21\u904d\u5386\u4e0d\u8bf4\u4e86\uff0c\u6bd5\u7adf\u662f\u4e2a\u6570\u503c\uff0c\u4e3a\u4e86\u4e0d\u56de\u5934\uff0c\u6570\u503c\u66ff\u6362\u5c31\u4f53\u73b0\u5728\uff0c\u5148\u627e\u6700\u5c0f\u7684\uff0c\u7136\u540e\u7528\u5f53\u524d\u7684\u51cf\u6700\u5c0f\u7684\uff0c\u5f97\u5230\u7684\u503c\u66ff\u6362\u6700\u540e\u8f93\u51fa\u503c\uff0c\u8fd9\u91cc\u8fde\u6700\u540e\u4e00\u6b65\u5927\u5c0f\u66ff\u6362\u90fd\u8986\u76d6\u4e86\u3002</p> <p>\u4ee3\u7801\uff1a</p> <pre><code>int maxProfit(int* prices, int pricesSize){\n    int i,numMin,max=0;\n    numMin=prices[0];\n    for(i=0;i&lt;pricesSize;i++)\n    {\n        if(prices[i]&lt;numMin)\n        {\n            numMin=prices[i];\n        }\n\n        if(prices[i]-numMin&gt;max)\n        {\n            max=prices[i]-numMin;\n        }\n    }\n    return max;\n}\n</code></pre>"}]}